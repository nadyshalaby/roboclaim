services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always
    networks:
      - app-network

  backend:
    build:
      context: ./be
      dockerfile: Dockerfile
    volumes:
      - ./be:/usr/src/app
      - /usr/src/app/node_modules
    restart: always
    ports:
      - "3000:3000"
    command: sh -c "rm -rf dist && pnpm start:dev"
    environment:
      - PORT=${PORT}
      - NODE_ENV=development
      - FRONTEND_URL=${FRONTEND_URL}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE}
      - UPLOAD_DIR=${UPLOAD_DIR}
      - DATABASE_HOST=postgres
      - DATABASE_PORT=${DATABASE_PORT}
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_TYPE=${DATABASE_TYPE}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT}
    depends_on:
      - postgres
      - redis
    networks:
      - app-network

  frontend:
    build:
      context: ./fe
      dockerfile: Dockerfile
    volumes:
      - ./fe:/usr/src/app
    restart: unless-stopped
    ports:
      - "3001:3000"
    command: npm run dev
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:3000
      - NODE_ENV=development
      - WATCHPACK_POLLING=true
    depends_on:
      - backend
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
